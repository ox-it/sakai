<?xml version="1.0" encoding="UTF-8"?>
<!--
  #%L
  Course Signup Webapp
  %%
  Copyright (C) 2010 - 2013 University of Oxford
  %%
  Licensed under the Educational Community License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
              http://opensource.org/licenses/ecl2
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  #L%
  -->

<web-app id="WebApp_ID" version="2.4"
	xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee  
                  http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
	<display-name>Course Signup</display-name>

	<!-- Load Spring context -->
	<listener>
		<listener-class>org.sakaiproject.util.SakaiContextLoaderListener</listener-class>
	</listener>
	<!-- Register out tool -->
	<listener>
		<listener-class>org.sakaiproject.util.ToolListener</listener-class>
	</listener>

	<filter>
		<filter-name>sakai.request</filter-name>
		<filter-class>uk.ac.ox.oucs.vle.StreamRequestFilter</filter-class>
		<init-param>
			<param-name>upload.enabled</param-name>
			<param-value>false</param-value>
		</init-param>
		<init-param><!-- This stops the filter from trying to detect/put the placement from/in the url. -->
			<param-name>tool.placement</param-name>
			<param-value>true</param-value>
		</init-param>
		<init-param>
			<param-name>context</param-name>
			<param-value></param-value>
		</init-param>
	</filter>

	<filter>
		<filter-name>sakai.basicauth</filter-name>
		<filter-class>uk.ac.ox.oucs.vle.BasicAuthenticatedRequestFilter</filter-class>
	</filter>
	
	<!-- OAuth Filters -->
    <filter>
        <filter-name>oauth.pre</filter-name>
        <filter-class>org.sakaiproject.oauth.filter.OAuthPreFilter</filter-class>
    </filter>
    <filter>
        <filter-name>oauth.post</filter-name>
        <filter-class>org.sakaiproject.oauth.filter.OAuthPostFilter</filter-class>
    </filter>
    
    <filter-mapping>
        <filter-name>oauth.pre</filter-name>
        <servlet-name>Jersey Web Application</servlet-name>
        <dispatcher>REQUEST</dispatcher>
    </filter-mapping>

	<filter-mapping>
		<filter-name>sakai.request</filter-name>
		<servlet-name>course.signup</servlet-name>
		<dispatcher>REQUEST</dispatcher>
		<dispatcher>FORWARD</dispatcher>
		<dispatcher>INCLUDE</dispatcher>
	</filter-mapping>

	<filter-mapping>
		<filter-name>sakai.request</filter-name>
		<servlet-name>Jersey Web Application</servlet-name>
		<dispatcher>REQUEST</dispatcher>
		<dispatcher>FORWARD</dispatcher>
		<dispatcher>INCLUDE</dispatcher>
	</filter-mapping>

	<!-- This has to happen after the sakai.request filter -->
	<filter-mapping>
		<filter-name>sakai.basicauth</filter-name>
		<servlet-name>Jersey Web Application</servlet-name>
		<dispatcher>REQUEST</dispatcher>
		<dispatcher>FORWARD</dispatcher>
		<dispatcher>INCLUDE</dispatcher>
	</filter-mapping>
	
	<filter>
		<filter-name>hibernate-session</filter-name>
		<filter-class>org.springframework.orm.hibernate3.support.OpenSessionInViewFilter</filter-class>
		<init-param>
			<param-name>singleSession</param-name>
			<param-value>true</param-value>
		</init-param>
		<init-param>
			<param-name>sessionFactoryBeanName</param-name>
			<param-value>org.sakaiproject.springframework.orm.hibernate.GlobalSessionFactory</param-value>
		</init-param>
	</filter>
	
	<filter-mapping>
		<filter-name>hibernate-session</filter-name>
		<servlet-name>Jersey Web Application</servlet-name>
		<dispatcher>REQUEST</dispatcher>
		<dispatcher>FORWARD</dispatcher>
		<dispatcher>INCLUDE</dispatcher>
	</filter-mapping>
	
	<filter-mapping>
        <filter-name>oauth.post</filter-name>
        <servlet-name>Jersey Web Application</servlet-name>
        <dispatcher>REQUEST</dispatcher>
    </filter-mapping>
    
	<!-- Application class name -->
	<servlet>
		<servlet-name>Jersey Web Application</servlet-name>
		<servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>
		<init-param>
			<param-name>jersey.config.server.provider.packages</param-name>
			<param-value>uk.ac.ox.oucs.vle.resources;org.codehaus.jackson.jaxrs</param-value>
		</init-param>
		<init-param>
			<param-name>jersey.config.server.provider.classnames</param-name>
			<param-value>org.glassfish.jersey.server.mvc.jsp.JspMvcFeature</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	
	<servlet>
		<servlet-name>course.admin</servlet-name>
		<servlet-class>uk.ac.ox.oucs.vle.SchedulerTool</servlet-class>
	</servlet>
	
	<servlet>
		<!--  Spring MVC -->
		<servlet-name>course.signup</servlet-name>
		<servlet-class>uk.ac.ox.oucs.vle.mvc.CourseDispatcherServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	 
	<servlet-mapping>
		<!-- We map the servlet so that Jersey can easily displatch to it -->
		<servlet-name>course.signup</servlet-name>
		<url-pattern>/pages/*</url-pattern>
	</servlet-mapping>
	
	<servlet-mapping>
		<!--  So we can access the static content. -->
		<servlet-name>Jersey Web Application</servlet-name>
		<url-pattern>/rest/*</url-pattern>
	</servlet-mapping>
	
	<servlet-mapping>
		<!--  So we can access the static content. -->
		<servlet-name>Jersey Web Application</servlet-name>
		<url-pattern>/auth_rest/*</url-pattern>
	</servlet-mapping>
	
</web-app>
