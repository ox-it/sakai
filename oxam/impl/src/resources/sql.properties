paper.create = CREATE TABLE paper (\
	id BIGINT(11) AUTO_INCREMENT PRIMARY KEY,\
	title VARCHAR(255) NOT NULL,\
	code VARCHAR(10) NOT NULL,\
	academic_year INT NOT NULL\
)

paper.index = CREATE UNIQUE INDEX paper_idx ON paper(code, academic_year)

paper.select.one= SELECT id, title, code, academic_year FROM paper WHERE id = ?
paper.select.code.year=SELECT id, title, code, academic_year FROM paper WHERE code = ? AND academic_year = ?
paper.insert=INSERT INTO paper(title, code, academic_year) values (?, ?, ?)
paper.update=UPDATE paper SET title = ?, code = ?, academic_year = ? WHERE id = ?

# Need to make sure we have an index for this
paper.codes.begin = SELECT dis.id, dis.code, dis.title, dis.academic_year FROM paper dis, \
	(SELECT code, MAX(academic_year) AS academic_year FROM paper WHERE code IN (
paper.codes.end=) GROUP BY code ) maxi \
	WHERE dis.code = maxi.code AND dis.academic_year = maxi.academic_year  


# All the stuff for the exam tables

exam.create = CREATE TABLE exam (\
	id BIGINT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,\
	title VARCHAR(255) NOT NULL,\
	code VARCHAR(10) NOT NULL,\
	category VARCHAR(2) NOT NULL,\
	academic_year INT NOT NULL\
)

exam.index = CREATE UNIQUE INDEX exam_idx ON exam(code, academic_year)

exam.select.one = SELECT id, title, code, category, academic_year FROM exam WHERE id = ?
exam.select.code.year = SELECT id, title, code, category, academic_year FROM exam WHERE code = ? AND academic_year = ?
exam.update = UPDATE exam SET category = ?, title = ?, code = ?, academic_year = ? WHERE id = ?
exam.insert = INSERT INTO exam(category, title, code, academic_year) VALUES (?, ?, ?, ?)

# Need to make sure we have an index for these 
exam.codes = SELECT dis.id, dis.title, dis.code, dis.category, dis.academic_year FROM exam dis, \
	(SELECT code, MAX(academic_year) AS academic_year FROM exam GROUP BY code ) maxi \
	WHERE dis.code = maxi.code AND dis.academic_year = maxi.academic_year

exam.codes.begin = SELECT dis.id, dis.title, dis.code, dis.category, dis.academic_year FROM exam dis, \
	(SELECT code, MAX(academic_year) AS academic_year FROM exam WHERE code IN (
exam.codes.end=) GROUP BY code ) maxi \
	WHERE dis.code = maxi.code AND dis.academic_year = maxi.academic_year  


exampaperfile.create = CREATE TABLE exampaper (\
	id BIGINT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,\
	exam BIGINT(11) NOT NULL,\
	paper BIGINT(11) NOT NULL,\
	paper_file TEXT NOT NULL,\
	academic_year int NOT NULL,\
	term CHAR(1) NOT NULL\
)
exampaperfile.index = CREATE UNIQUE INDEX exampaper_idx ON exampaper (paper, exam, academic_year, term)
# Needed for finding papers.
exampaperfile.index.1 = CREATE INDEX exampaper_idx_1 ON exampaper (paper)
# Needed for finding exams 
exampaperfile.index.2 = CREATE INDEX exampaper_idx_2 ON exampaper (exam)
exampaperfile.index.3 = CREATE INDEX exampaper_idx_3 ON exampaper (academic_year)

exampaperfile.insert=INSERT INTO exampaper(exam, paper, paper_file, academic_year, term) \
	VALUES (?, ?, ?, ?, ?)
exampaperfile.update=UPDATE exampaper SET paper_file = ?, term = ? WHERE id = ?
exampaperfile.delete=DELETE FROM exampaper WHERE id = ?
exampaperfile.select.one=SELECT * FROM exampaper WHERE id = ?

# ResultSets ignore table aliases, so all columns must be unique
exampaper.select.one=SELECT ep.id as id, ep.exam, e.category, e.title as exam_title, e.code as exam_code, \
	ep.paper, p.title as paper_title, p.code as paper_code, ep.paper_file, ep.academic_year, ep.term \
	FROM exampaper AS ep, exam AS e, paper AS p WHERE ep.exam = e.id AND ep.paper = p.id \
	AND ep.id = ?

exampaper.select.range=SELECT ep.id as id, ep.exam, e.category, e.title as exam_title, e.code as exam_code, \
	ep.paper, p.title as paper_title, p.code as paper_code, ep.paper_file, ep.academic_year, ep.term \
	FROM exampaper AS ep, exam AS e, paper AS p WHERE ep.exam = e.id AND ep.paper = p.id \
	LIMIT :length OFFSET :start
exampaper.select.all=SELECT ep.id as id, ep.exam, e.category, e.title as exam_title, e.code as exam_code, \
	ep.paper, p.title as paper_title, p.code as paper_code, ep.paper_file, ep.academic_year, ep.term \
	FROM exampaper AS ep, exam AS e, paper AS p WHERE ep.exam = e.id AND ep.paper = p.id
	
exampaper.select=SELECT ep.id as id, ep.exam, e.category, e.title as exam_title, e.code as exam_code, \
	ep.paper, p.title as paper_title, p.code as paper_code, ep.paper_file, ep.academic_year, ep.term \
	FROM exampaper AS ep, exam AS e, paper AS p WHERE ep.exam = e.id AND ep.paper = p.id \


# Select an exampaper by example, possibly with a range limit.
exampaper.select.example.begin= AND (
exampaper.select.example.end=)
	
exampaper.select.id=ep.id = :id
exampaper.select.category=e.category = :category
exampaper.select.exam_id=e.id = :exam_id
exampaper.select.exam_title=e.title = :exam_title
exampaper.select.exam_code=e.code = :exam_code
exampaper.select.paper_id=p.id = :paper_id
exampaper.select.paper_title=p.title = :paper_title
exampaper.select.paper_code=p.code = :paper_code
exampaper.select.paper_file=ep.paper_file = :paper_file
exampaper.select.year=ep.academic_year = :academic_year
exampaper.select.term=ep.term = :term

exampaper.select.range=LIMIT :length OFFSET :start

exampaper.count=SELECT COUNT(id) FROM exampaper
exampaper.count.where=SELECT COUNT(ep.id) \
	FROM exampaper AS ep, exam AS e, paper AS p WHERE ep.exam = e.id AND ep.paper = p.id \

exampaper.years=SELECT DISTINCT academic_year FROM exampaper ORDER BY academic_year DESC
 



